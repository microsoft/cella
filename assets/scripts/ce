#!/bin/sh 

# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# wrapper script for ce.
# this is intended to be dot-sourced and then you can use the ce() function.

# DEBUGGING :
# set | grep -i ^CE

# check to see if we've been dot-sourced (should work for most POSIX shells)
sourced=0

if [ -n "$ZSH_EVAL_CONTEXT" ]; then 
  case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
  [ "$(cd $(dirname -- $0) && pwd -P)/$(basename -- $0)" != "$(cd $(dirname -- ${.sh.file}) && pwd -P)/$(basename -- ${.sh.file})" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
  (return 0 2>/dev/null) && sourced=1 
else # All other shells: examine $0 for known shell binary filenames
  # Detects `sh` and `dash`; add additional shell filenames as needed.
  case ${0##*/} in sh|dash) sourced=1;; esac
fi

if [ $sourced -eq 0 ]; then
  echo 'This script is expected to be dot-sourced so that it may load ce into the'
  echo 'current environment and not require permanent changes to the system when you activate.'
  echo ''
  echo "You should instead run '. $(basename $0)' first to import ce into the current session."
  exit
fi


# GLOBALS
CE_NODE_LATEST=14.17.0
CE_NODE_REMOTE=https://nodejs.org/dist/
CE_PWD=`pwd`

ce_init() {
  CE_OS="$(uname | sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/')"
  CE_ARCH="$(uname -m | sed -e 's/x86_64/x64/;s/i86pc/x64/;s/i686/x86/;s/aarch64/arm64/')"

  case $CE_OS in 
    ( mingw64_nt* | msys_nt* ) CE_OS="win";;
    ( darwin*|*bsd*) CE_IS_THIS_BSD=TRUE;;
    ( aix ) CE_ARCH="ppc64" ;;
  esac

  if [ ! -z "$CE_IS_THIS_BSD" ]; then
    CE_START_TIME=$(date +%s)
  else 
    CE_START_TIME=$(($(date +%s%N)/1000000))
  fi

  # find important cmdline args
  CE_ARGS=()
  for each in "$@"; do case $each in
    --reset-ce) CE_RESET=TRUE;;
    --remove-ce) CE_REMOVE=TRUE;;
    --debug) CE_DEBUG=TRUE && CE_ARGS+=("$each");;
    *) CE_ARGS+=("$each");;
  esac ;done
}

ce_init "$@"
shift $#

# at this point, we're pretty sure we've been dot-sourced 
# Try to locate the $CE_HOME folder, where the ce is installed.
if [ -n "$CE_HOME" ]; then 
  # specify it on the command line if you like, we'll export it 
  export CE_HOME=$CE_HOME
else 
  # default is off the home folder
  export CE_HOME=~/.ce
fi;

mkdir -p $CE_HOME

CE_NODE=${CE_HOME}/cache/bin/node
CE_NPM=${CE_HOME}/cache/bin/npm

ce_debug() {
  if [ ! -z "$CE_IS_THIS_BSD" ]; then
    local NOW=$(date +%s)
    local OFFSET="$(( $NOW - $CE_START_TIME )) sec"
  else
    local NOW=$(($(date +%s%N)/1000000))
    local OFFSET="$(( $NOW - $CE_START_TIME )) msec"
  fi

  if [ ! -z "$CE_DEBUG" ]; then
    if [ -n "$CE_NESTED" ]; then
      echo "[NESTED $OFFSET] $*"
    else
      echo "[$OFFSET] $*"
    fi  
  fi

  if [ -n "$CE_NESTED" ]; then
    echo "[NESTED $OFFSET] $*" >> $CE_HOME/log.txt
  else
    echo "[$OFFSET] $*" >> $CE_HOME/log.txt
  fi      
}

if [ ! -z "$CE_RESET" ]; then
  if [ -d $CE_HOME/node_modules ]; then 
    echo Forcing reinstall of vcpkg-ce package
    rm -rf $CE_HOME/node_modules
  fi

  if [ -d $CE_HOME/cache/bin ]; then 
    rm -rf $CE_HOME/cache/bin
  fi 

  if [ -d $CE_HOME/cache/lib ]; then 
    rm -rf $CE_HOME/cache/lib
  fi
fi

if [ ! -z "$CE_REMOVE" ]; then
  if [ -d $CE_HOME/node_modules ]; then 
    echo Removing vcpkg-ce package
    rm -rf $CE_HOME/node_modules
  fi

  if [ -d $CE_HOME/cache/bin ]; then 
    rm -rf $CE_HOME/cache/bin
  fi 

  if [ -d $CE_HOME/cache/lib ]; then 
    rm -rf $CE_HOME/cache/lib
  fi

  if [ -f $CE_HOME/ce.ps1 ]; then 
    rm -f $CE_HOME/ce.ps1
  fi

  if [ -f $CE_HOME/ce ]; then 
    rm -f $CE_HOME/ce
  fi

  if [ -f $CE_HOME/NOTICE.txt ]; then 
    rm -f $CE_HOME/NOTICE.txt
  fi

  if [ -f $CE_HOME/LICENSE.txt ]; then 
    rm -f $CE_HOME/LICENSE.txt
  fi

  # cleanup environment.
  . <(set | grep -i ^CE | sed -e 's/[=| |\W].*//;s/^/unset /')
  
  # remove functions (zsh)
  which functions  > /dev/null 2>&1  && . <(functions | grep -i ^ce | sed -e 's/[=| |\W].*//;s/^/unset -f /')
  return
fi

ce_cleanup() {
  # clear things that we're not going to need for the long term
  unset CE_NODE_LATEST
  unset CE_NODE_REMOTE
  unset CE_PWD
  unset CE_NPM
  unset CE_NESTED
  unset CE_OS
  unset CE_ARCH
  unset CE_IS_THIS_BSD
  unset CE_DEBUG
  unset -f ce_bootstrap_node > /dev/null 2>&1
  unset -f ce_bootstrap_ce > /dev/null 2>&1
  unset CE_REMOVE
  unset CE_RESET
  unset CE_START_TIME
  unset CE_ARGS
  if [ -f "${CE_POSTSCRIPT}" ]; then
    command rm "${CE_POSTSCRIPT}"
  fi
	unset CE_POSTSCRIPT
}

ce_bootstrap_node() {
  ce_debug starting ce_bootstrap_node

  local NODE_EXE="node"
  if [ "${CE_OS}" = "win" ]; then
    NODE_EXE="node.exe"
  fi

  local N=`which $NODE_EXE`
  if [ ! -z "$N" ]; then
    if [ -f $N ]; then
      if [ `$N -e "[major, minor, patch ] = process.versions.node.split('.'); console.log( !!(major>14 || major == 14 & minor >= 17) )"` = "true" ]; then
        CE_NODE=$N
        CE_NPM=`which npm`
        ce_debug using node in path
        return 0
      fi
    fi
  fi



  # we don't have a good node in the path
  # we would install one here if we tried 
  # before
  CE_NODE=${CE_HOME}/cache/bin/node
  
  if [ -f $CE_NODE ]; then 
    if [ `$CE_NODE -e "[major, minor, patch ] = process.versions.node.split('.'); console.log( !!(major>14 || major == 14 & minor >= 17))"` = "true" ]; then
      # looks good, lets grab NPM in case we need it, and get out.
      CE_NPM=`which ${CE_HOME}/cache/bin/npm`
      ce_debug using node from ce cache
      return 0
    fi 
  fi
  
  # we don't seem to have a suitable nodejs on the path
  # let's grab a well-known one, cache it and use it.

  local CE_ARCHIVE_EXT=".tar.gz"
	local TAR_FLAGS="-zxvf"
	if [ "${CE_OS}" = "win" ]; then
	  CE_ARCHIVE_EXT=".zip"
  fi

  local NODE_FULLNAME="node-v${CE_NODE_LATEST}-${CE_OS}-${CE_ARCH}"
  local NODE_URI="${CE_NODE_REMOTE}v${CE_NODE_LATEST}/${NODE_FULLNAME}${CE_ARCHIVE_EXT}"
  local CE_ARCHIVE="${CE_HOME}/cache/${NODE_FULLNAME}${CE_ARCHIVE_EXT}"
  
  if [ ! -d "${CE_HOME}/cache" ]; then
    command mkdir -p "${CE_HOME}/cache"
  fi

  echo "Downloading bootstrap node from ${NODE_URI}"
  if type noglob > /dev/null 2>&1; then
    noglob curl -L -# "${NODE_URI}" -o "${CE_ARCHIVE}"
  else
    curl -L -# "${NODE_URI}" -o "${CE_ARCHIVE}"
  fi

   if [ ! -f "${CE_ARCHIVE}" ]; then
    echo "Failed to download node binary."
    return 1
  fi
    
  # UNPACK IT
  if [ "${CE_OS}" = "aix" ]; then
    gunzip "${CE_ARCHIVE}" | tar -xvC "${CE_HOME}/cache" "${NODE_FULLNAME}/bin/${NODE_EXE}" >> $CE_HOME/log.txt 2>&1
  else
    tar $TAR_FLAGS "${CE_ARCHIVE}" -C "${CE_HOME}/cache" >> $CE_HOME/log.txt 2>&1
  fi
  mv "${CE_HOME}/cache/${NODE_FULLNAME}/bin" "${CE_HOME}/cache/" >> $CE_HOME/log.txt 2>&1
  mv "${CE_HOME}/cache/${NODE_FULLNAME}/lib" "${CE_HOME}/cache/" >> $CE_HOME/log.txt 2>&1
  rm -r "${CE_HOME}/cache/${NODE_FULLNAME}" >> $CE_HOME/log.txt 2>&1

  # OK, we good?
  CE_NODE=${CE_HOME}/cache/bin/node
  CE_NPM=${CE_HOME}/cache/bin/npm

  if [ ! -f $CE_NODE ]; then
    echo "ERROR! Unable to find/get nodejs."
    if [ "$CE_OS" = "freebsd" ]; then
      echo "NodeJS is not available for your OS as a binary drop."
      echo "You appear to be running FreeBSD; You will need to install NodeJS manually"
      echo ""
      echo "run (as root): "
      echo "   pkg install -y node14"
      echo "   pkg install -y npm-node14" 
    fi
    return 1;
  fi

  if [ ! -f $CE_NPM ]; then
    echo "ERROR! Unable to find/get npm"
    return 1;
  fi

  ce_debug installed node in cache
  return 0
}

CE_SCRIPT=${CE_HOME}/node_modules/.bin/ce
CE_MAIN=${CE_HOME}/node_modules/@microsoft/vcpkg-ce

ce_bootstrap_ce() {
  ce_debug checking for installed ce $CE_SCRIPT

  if [ -f $CE_SCRIPT ]; then
    ce_debug ce is installed.
    return 0
  fi

  # it's not there!
  # let's install it where we want it

  # ensure we have a node_modules here, so npm won't search for one up the tree.
  command mkdir -p $CE_HOME/node_modules
  
  echo Installing vcpkg-ce in $CE_HOME
  unset CE_RESET

  cd $CE_HOME
  $CE_NODE $CE_NPM cache clean --force >> $CE_HOME/log.txt 2>&1
  local OLD_PATH=$PATH
  PATH=`dirname $CE_NODE`:$PATH
  if [ ! -z "$USE_LOCAL_CE_PKG" ]; then
    echo USING LOCAL CE PACKAGE $USE_LOCAL_CE_PKG
    $CE_NODE $CE_NPM --force install --no-save --no-lockfile --scripts-prepend-node-path=true $USE_LOCAL_CE_PKG  >> $CE_HOME/log.txt 2>&1
  else
    $CE_NODE $CE_NPM --force install --no-save --no-lockfile --scripts-prepend-node-path=true https://aka.ms/vcpkg-ce.tgz  >> $CE_HOME/log.txt 2>&1
  fi

  PATH=$OLD_PATH

  cp $CE_HOME/node_modules/.bin/* .

  # Copy the NOTICE and LICENSE files to $CE_HOME to improve discoverability.
  cp $CE_HOME/node_modules/@microsoft/vcpkg-ce/NOTICE.txt .
  cp $CE_HOME/node_modules/@microsoft/vcpkg-ce/LICENSE.txt .

  # go back where we were
  cd $CE_PWD
  
  if [  ! -f $CE_SCRIPT ]; then
    echo "ERROR! Unable to find/get ce script command $CE_SCRIPT"
    return 1;
  fi

  ce_debug ce is installed
  return 0;
}

# first, let's make sure we have a good copy of node
ce_bootstrap_node

if [ $? -eq 1 ]; then
  ce_debug failed to acquire node.js
  ce_cleanup
  return 1;
fi

ce_bootstrap_ce

# is ce installed?
if [ $? -eq 1 ]; then
  ce_debug failed to bootstrap ce.js
  ce_cleanup
  return 1;
fi

if [ -z $CE_NESTED ]; then
  ce_debug executing final script: $CE_SCRIPT
  CE_NESTED=TRUE
  . $CE_SCRIPT $CE_ARGS
  return # let the real script take over from here. 
fi

# So, we're the real script then.
ce_debug 'real ce adding function'

ce() {
  # set | grep -i ^CE

  local cst=$CE_START_TIME

  ce_init "$@"

  if [ ! -z "$CE_RESET" ]; then
    if [ -d $CE_HOME/node_modules ]; then 
      echo Forcing reinstall of vcpkg-ce package
      rm -rf $CE_HOME/node_modules
    fi

    if [ -d $CE_HOME/cache/bin ]; then 
      rm -rf $CE_HOME/cache/bin
    fi 

    if [ -d $CE_HOME/cache/lib ]; then 
      rm -rf $CE_HOME/cache/lib
    fi
    unset CE_RESET
    
    if [ ! -z "$USE_LOCAL_CE_SCRIPT" ]; then
      echo USING LOCAL CE SCRIPT $USE_LOCAL_CE_SCRIPT
      . <(cat $USE_LOCAL_CE_SCRIPT) "${CE_ARGS[@]}"
    else
      . <(curl -L -# aka.ms/install-ce.sh) "${CE_ARGS[@]}"
    fi

    return 0
  fi

  if [ ! -z "$CE_REMOVE" ]; then
    if [ -d $CE_HOME/node_modules ]; then 
      unset CE_REMOVE
      echo Removing vcpkg-ce package
      rm -rf $CE_HOME/node_modules
    fi

    if [ -d $CE_HOME/cache/bin ]; then 
      rm -rf $CE_HOME/cache/bin
    fi 

    if [ -d $CE_HOME/cache/lib ]; then 
      rm -rf $CE_HOME/cache/lib
    fi

    if [ -f $CE_HOME/ce.ps1 ]; then 
      rm -f $CE_HOME/ce.ps1
    fi

    if [ -f $CE_HOME/ce ]; then 
      rm -f $CE_HOME/ce
    fi

    if [ -f $CE_HOME/NOTICE.txt ]; then 
      rm -f $CE_HOME/NOTICE.txt
    fi

    if [ -f $CE_HOME/LICENSE.txt ]; then 
      rm -f $CE_HOME/LICENSE.txt
    fi

    # cleanup environment
    . <(set | grep -i ^CE | sed -e 's/[=| |\W].*//;s/^/unset /')
    
    # remove functions (zsh)
    which functions  > /dev/null 2>&1  && . <(functions | grep -i ^ce | sed -e 's/[=| |\W].*//;s/^/unset -f /')
    return 0
  fi

  if [ ! -f $CE_NODE ]; then
    echo The installation of nodejs $CE_NODE that ce is using is missing
    echo You may need to reacquire ce with '. <(curl aka.ms/install-ce.sh -L)'
    echo or fix your nodejs installation.
  fi

  if [ ! -d $CE_MAIN ]; then
    echo The installation of ce is corrupted. $CE_MAIN
    echo You may need to reacquire ce with '. <(curl aka.ms/install-ce.sh -L)'
  fi

  # set the response file
	# Generate 32 bits of randomness, to avoid clashing with concurrent executions.
	export CE_POSTSCRIPT="${CE_HOME}/ce_tmp_$(dd if=/dev/urandom count=1 2> /dev/null | cksum | cut -f1 -d" ").sh"

  # call ce.js
  # it picks up the CE_POSTSCRIPT environment variable to know where to dump the postscript
  $CE_NODE --harmony $CE_MAIN ${CE_ARGS[@]}
  
  ce_debug called ce.js
  # modify the environment 

  # Call the post-invocation script if it is present, then delete it.
	# This allows the invocation to potentially modify the caller's environment (e.g. PATH)
	if [ -f "${CE_POSTSCRIPT}" ]; then
		. "${CE_POSTSCRIPT}"
		command rm "${CE_POSTSCRIPT}"
		unset CE_POSTSCRIPT
	fi

  ce_cleanup

  CE_START_TIME=$cst
}

# did they dotsource and have args go ahead and run it then!
if [ -n "$CE_ARGS" ]; then 
  ce "${CE_ARGS[@]}"
fi

ce_cleanup
